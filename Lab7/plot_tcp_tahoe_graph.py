#!/usr/bin/env python3
"""
TCP Tahoe Graph Plotter

This script reads the CSV file generated by the TCP Tahoe implementation
and creates graphs showing:
1. Congestion Window vs Transmission Round
2. Slow Start Threshold vs Transmission Round

Usage: python3 plot_tcp_tahoe_graph.py
"""

import pandas as pd
import matplotlib.pyplot as plt
import os
import sys

def plot_tcp_tahoe_data(csv_file="tcp_tahoe_graph_data.csv"):
    """
    Plot TCP Tahoe congestion control data from CSV file
    """
    # Check if the CSV file exists
    if not os.path.exists(csv_file):
        print(f"Error: {csv_file} not found!")
        print("Please run the TCP Tahoe client first to generate the data.")
        return False
    
    try:
        # Read the CSV data
        df = pd.read_csv(csv_file)
        
        # Check if data exists
        if df.empty:
            print("Error: CSV file is empty!")
            return False
        
        print(f"Loaded {len(df)} data points from {csv_file}")
        
        # Check if data is in new format (segments) or old format (bytes)
        if 'CongestionWindowSegments' in df.columns:
            # New format - already in segments
            cwnd_col = 'CongestionWindowSegments'
            ssthresh_col = 'SlowStartThresholdSegments'
        else:
            # Old format - convert bytes to segments
            MSS = 730  # Maximum Segment Size in bytes
            df['CongestionWindowSegments'] = df['CongestionWindow'] / MSS
            df['SlowStartThresholdSegments'] = df['SlowStartThreshold'] / MSS
            cwnd_col = 'CongestionWindowSegments'
            ssthresh_col = 'SlowStartThresholdSegments'
        
        print("\nData summary (in segments):")
        print(df[['TransmissionRound', cwnd_col, ssthresh_col]].describe())
        
        # Create figure with subplots
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
         # Plot 1: Congestion Window vs Transmission Round (in segments)
        ax1.plot(df['TransmissionRound'], df[cwnd_col], 
                marker='o', linewidth=2, markersize=4, label='Congestion Window')
        ax1.plot(df['TransmissionRound'], df[ssthresh_col], 
                marker='s', linewidth=2, markersize=4, label='Slow Start Threshold', linestyle='--')

        ax1.set_xlabel('Transmission Round')
        ax1.set_ylabel('Window Size (segments)')
        ax1.set_title('TCP Tahoe: Congestion Window and Slow Start Threshold vs Transmission Round')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Set x-axis to show every round
        ax1.set_xticks(df['TransmissionRound'])
        ax1.set_xlim(df['TransmissionRound'].min() - 0.5, df['TransmissionRound'].max() + 0.5)
        
        # Color code different states
        slow_start_data = df[df['State'] == 'SLOW_START']
        congestion_avoidance_data = df[df['State'] == 'CONGESTION_AVOIDANCE']
        
        if not slow_start_data.empty:
            ax1.scatter(slow_start_data['TransmissionRound'], slow_start_data[cwnd_col], 
                       color='green', alpha=0.6, s=30, label='Slow Start', zorder=5)
        
        if not congestion_avoidance_data.empty:
            ax1.scatter(congestion_avoidance_data['TransmissionRound'], congestion_avoidance_data[cwnd_col], 
                       color='orange', alpha=0.6, s=30, label='Congestion Avoidance', zorder=5)
        
        ax1.legend()
        
        # Plot 2: Events Timeline
        events_of_interest = ['PACKET_LOSS_TIMEOUT', 'PACKET_LOSS_FAST_RETRANSMIT', 
                             'TRANSITION_TO_CONGESTION_AVOIDANCE']
        
        ax2.plot(df['TransmissionRound'], df[cwnd_col], 
                marker='o', linewidth=2, markersize=4, color='blue', alpha=0.7)
        
        # Mark special events
        for event in events_of_interest:
            event_data = df[df['Event'] == event]
            if not event_data.empty:
                ax2.scatter(event_data['TransmissionRound'], event_data[cwnd_col], 
                           s=100, alpha=0.8, label=event.replace('_', ' ').title(), zorder=6)
        
        ax2.set_xlabel('Transmission Round')
        ax2.set_ylabel('Congestion Window (segments)')
        ax2.set_title('TCP Tahoe: Congestion Window with Key Events')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # Set x-axis to show every round for second plot too
        ax2.set_xticks(df['TransmissionRound'])
        ax2.set_xlim(df['TransmissionRound'].min() - 0.5, df['TransmissionRound'].max() + 0.5)
        
        plt.tight_layout()
        
        # Save the plot
        output_file = 'tcp_tahoe_graph.png'
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"\nGraph saved as: {output_file}")
        
        # Show the plot
        plt.show()
        
        # Print some statistics
        print(f"\nTCP Tahoe Statistics:")
        print(f"Total transmission rounds: {df['TransmissionRound'].max()}")
        print(f"Maximum congestion window: {df['CongestionWindowSegments'].max():.1f} segments")
        print(f"Final congestion window: {df['CongestionWindowSegments'].iloc[-1]:.1f} segments")
        
        # Count events
        event_counts = df['Event'].value_counts()
        print(f"\nEvent summary:")
        for event, count in event_counts.items():
            print(f"  {event}: {count}")
        
        return True
        
    except Exception as e:
        print(f"Error reading or plotting data: {e}")
        return False

def main():
    """
    Main function
    """
    print("TCP Tahoe Graph Plotter")
    print("=" * 50)
    
    csv_file = "tcp_tahoe_graph_data.csv"
    if len(sys.argv) > 1:
        csv_file = sys.argv[1]
    
    success = plot_tcp_tahoe_data(csv_file)
    
    if success:
        print("\nGraphing completed successfully!")
    else:
        print("\nGraphing failed. Please check the error messages above.")

if __name__ == "__main__":
    main()
